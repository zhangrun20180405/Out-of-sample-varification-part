import numpy as np
import random as random
random.seed(1215)
np.random.seed(1130)


z_ij_lb=(
        (7,7,7,0,0),
        (7,4,4,0,0),
        (5,4,3.5,0,0),
        (15,17,18,19,20),
        (14,16,18,20,25)
        )
'''
z_ij_lb=(
        (7,7,7,0,0),
        (7,3.5,3.5,0,0),
        (3.5,3.5,3.5,0,0),
        (15,17,18,19,20),
        (14,16,18,20,25)
        )   
'''

z_ij_ub=(
        (100,100,100,100,100),
        (100,100,100,100,100),
        (100,100,100,100,100),
        (21,22,23,26,27),
        (20,21,24,28,31)
        )
z_lower = np.array([0,0, 0,    0,0,0,     0,0, 0, ])
z_upper = np.array([35, 35, 35,  35,   35, 20, 20,  20, 20])
z_mean = np.array ([15, 16, 10,  18,  8,    9,       6,   7, 9])    
'''
good result:
offset_SIWSI=0.58
l=5
sigma_of_data_creation=0.5575
'''
offset_SIWSI=0.58

sigma_of_data_creation=0.55759
R_0_list=[0.95]
D_L_list=[29]
for R_0 in R_0_list:  
    for D_L in D_L_list:   
        l=5
        first_sigma_improvement=1.1
        first_sigma_percentage=0
        second_sigma_improvement=1.15
        second_sigma_percentage=0
        third_sigma_improvement=1.2
        third_sigma_percentage=0
        forth_sigma_improvement=1.3
        out_of_sample_mean_scale_1=0.9
        out_of_sample_mean_scale_2=0.9
        out_of_sample_mean_scale_3=0.9
        out_of_sample_mean_scale_4=0.9

        data_original,data_for_outofsample_9,data_for_outofsample_10,data_for_outofsample_11,data_for_outofsample_12=fun_create_data_Theta_4_OutSam(
        offset_SIWSI,z_lower,z_upper,z_mean,sigma_of_data_creation,first_sigma_improvement,second_sigma_improvement,
        third_sigma_improvement,forth_sigma_improvement,
         out_of_sample_mean_scale_1, out_of_sample_mean_scale_2, out_of_sample_mean_scale_3,  out_of_sample_mean_scale_4,
        )

        #v_ijk=list_data_to_tuple_with_k(z_mean,N,M_i,K)
        # out of sample testing date

        data_train=data_original[:OutOfSample]

        data_train_5=clustered_original_data_with_label(data_train,l,3)   #trainig set
        mu_data_train_5 = fun_data_M_i_cluster_to_tuple_mu(data_train_5,l,N,M_i,T_ij)
        #mu_data_train_5  fun_nu(data_train),N,M_i,K)
        v_ijk_train_5=fun_nu(data_train_5,N,M_i,l)
            #print("v_ijk_D_without_m is ",v_ijk_D_without_m)

        mu_lb_train_5 = tuple_data_with_deta_for_all(v_ijk_train_5,-0.5)
            #print("mu_lb_D_m is ",mu_lb_D_m)
        mu_ub_train_5 = tuple_data_with_deta_for_all(v_ijk_train_5,0.5)
            #print("mu_lb_D_m is ",mu_lb_D_m)

        sigma_train_5=fun_data_M_i_cluster_to_tuple_sigma(data_train_5,l,M_i)
        #print("sigma_D_m is  ",sigma_D_m)


        epsilon_5=fun_nu_epsilon(N,M_i,l)
            #print("epsilon is ",epsilon)

        p_5 = p_k(data_train_5, l)

        #print(p_5)

        x_dict_5, cost_p3_5 = model_DRO_Proposition_3_cv(R_0,D_L,mu_data_train_5,mu_lb_train_5,mu_ub_train_5
                                                     ,v_ijk_train_5,sigma_train_5,epsilon_5, p_5,l)
        x_5=dic_x_to_tuple_x(x_dict_5,N,M_i,T_ij)
        print("desin of OMD is \n ")
        print(x_5)
        cost_internal=costcount(c,x_5)
        print("K is %s cost is %s , D_L is %s, R_0 is %s \n"%(l,cost_internal,D_L,R_0))

        import numpy as np
        import random as random
        random.seed(1215)
        np.random.seed(1130)

        l=1

        first_sigma_improvement=1.1
        first_sigma_percentage=0
        second_sigma_improvement=1.15
        second_sigma_percentage=0
        third_sigma_improvement=1.2
        third_sigma_percentage=0
        forth_sigma_improvement=1.3
        out_of_sample_mean_scale_1=0.9
        out_of_sample_mean_scale_2=0.9
        out_of_sample_mean_scale_3=0.9
        out_of_sample_mean_scale_4=0.9
        data_original,data_for_outofsample_9,data_for_outofsample_10,data_for_outofsample_11,data_for_outofsample_12=fun_create_data_Theta_4_OutSam(
        offset_SIWSI,z_lower,z_upper,z_mean,sigma_of_data_creation,first_sigma_improvement,second_sigma_improvement,
        third_sigma_improvement,forth_sigma_improvement,
         out_of_sample_mean_scale_1, out_of_sample_mean_scale_2, out_of_sample_mean_scale_3,  out_of_sample_mean_scale_4,
        )

        z_ij_ub_train=z_ij_ub
        z_ij_lb_train=z_ij_lb

        z_ij_ub_test=z_ij_ub
        z_ij_lb_test=z_ij_lb

        #v_ijk=list_data_to_tuple_with_k(z_mean,N,M_i,K)
        # out of sample testing date

        data_train=data_original[:OutOfSample]

        data_train_5=clustered_original_data_with_label(data_train,l,3)   #trainig set
        mu_data_train_5 = fun_data_M_i_cluster_to_tuple_mu(data_train_5,l,N,M_i,T_ij)
        #mu_data_train_5  fun_nu(data_train),N,M_i,K)
        v_ijk_train_5=fun_nu(data_train_5,N,M_i,l)
            #print("v_ijk_D_without_m is ",v_ijk_D_without_m)

        mu_lb_train_5 = tuple_data_with_deta_for_all(v_ijk_train_5,-0.5)
            #print("mu_lb_D_m is ",mu_lb_D_m)
        mu_ub_train_5 = tuple_data_with_deta_for_all(v_ijk_train_5,0.5)
            #print("mu_lb_D_m is ",mu_lb_D_m)

        sigma_train_5=fun_data_M_i_cluster_to_tuple_sigma(data_train_5,l,M_i)
        #print("sigma_D_m is  ",sigma_D_m)


        epsilon_5=fun_nu_epsilon(N,M_i,l)
            #print("epsilon is ",epsilon)

        p_5 = p_k(data_train_5, l)

        #print(p_5)

        x_dict_5, cost_p3_5 = model_DRO_Proposition_3_cv(R_0,D_L,mu_data_train_5,mu_lb_train_5,mu_ub_train_5
                                                     ,v_ijk_train_5,sigma_train_5,epsilon_5, p_5,l)
        x_5=dic_x_to_tuple_x(x_dict_5,N,M_i,T_ij)
        print("desin of OMD is \n ")
        print(x_5)
        cost_internal=costcount(c,x_5)
        print("K is %s cost is %s , D_L is %s, R_0 is %s \n"%(l,cost_internal,D_L,R_0))


