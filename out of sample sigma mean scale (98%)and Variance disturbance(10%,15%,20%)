import numpy as np
import random as random
random.seed(1215)
np.random.seed(1130)


z_ij_lb=(
        (7,7,7,0,0),
        (7,4,4,0,0),
        (5,4,3.5,0,0),
        (15,17,18,19,20),
        (14,16,18,20,25)
        )
'''
z_ij_lb=(
        (7,7,7,0,0),
        (7,3.5,3.5,0,0),
        (3.5,3.5,3.5,0,0),
        (15,17,18,19,20),
        (14,16,18,20,25)
        )   
'''

z_ij_ub=(
        (100,100,100,100,100),
        (100,100,100,100,100),
        (100,100,100,100,100),
        (21,22,23,26,27),
        (20,21,24,28,31)
        )
z_lower = np.array([0,0, 0,    0,0,0,     0,0, 0, ])
z_upper = np.array([35, 35, 35,  35,   35, 20, 20,  20, 20])
z_mean = np.array ([15, 16, 10,  18,  8,    9,       6,   7, 9])    
'''
good result:
offset_SIWSI=0.58
l=5
sigma_of_data_creation=0.5575
'''
offset_SIWSI=0.58

sigma_of_data_creation=0.55759

l=5
first_sigma_improvement=1.1
first_sigma_percentage=0
second_sigma_improvement=1.15
second_sigma_percentage=0
third_sigma_improvement=1.2
third_sigma_percentage=0
forth_sigma_improvement=1.3
out_of_sample_mean_scale_1=0.92
out_of_sample_mean_scale_2=0.92
out_of_sample_mean_scale_3=0.92
out_of_sample_mean_scale_4=0.92

data_original,data_for_outofsample_5,data_for_outofsample_6,data_for_outofsample_7,data_for_outofsample_8=fun_create_data_Theta_4_OutSam(
    offset_SIWSI,z_lower,z_upper,z_mean,sigma_of_data_creation,first_sigma_improvement,second_sigma_improvement,
    third_sigma_improvement,forth_sigma_improvement,
     out_of_sample_mean_scale_1, out_of_sample_mean_scale_2, out_of_sample_mean_scale_3,  out_of_sample_mean_scale_4,
    )

#v_ijk=list_data_to_tuple_with_k(z_mean,N,M_i,K)
# out of sample testing date

data_train=data_original[:OutOfSample]

data_train_5=clustered_original_data_with_label(data_train,l,3)   #trainig set
mu_data_train_5 = fun_data_M_i_cluster_to_tuple_mu(data_train_5,l,N,M_i,T_ij)
#mu_data_train_5  fun_nu(data_train),N,M_i,K)
v_ijk_train_5=fun_nu(data_train_5,N,M_i,l)
        #print("v_ijk_D_without_m is ",v_ijk_D_without_m)

mu_lb_train_5 = tuple_data_with_deta_for_all(v_ijk_train_5,-0.5)
        #print("mu_lb_D_m is ",mu_lb_D_m)
mu_ub_train_5 = tuple_data_with_deta_for_all(v_ijk_train_5,0.5)
        #print("mu_lb_D_m is ",mu_lb_D_m)

sigma_train_5=fun_data_M_i_cluster_to_tuple_sigma(data_train_5,l,M_i)
#print("sigma_D_m is  ",sigma_D_m)


epsilon_5=fun_nu_epsilon(N,M_i,l)
        #print("epsilon is ",epsilon)

p_5 = p_k(data_train_5, l)

#print(p_5)

x_dict_5, cost_p3_5 = model_DRO_Proposition_3_cv(R_0,D_L,mu_data_train_5,mu_lb_train_5,mu_ub_train_5
                                                 ,v_ijk_train_5,sigma_train_5,epsilon_5, p_5,l)
x_5=dic_x_to_tuple_x(x_dict_5,N,M_i,T_ij)
print("desin of OMD is \n ")
print(x_5)
cost_internal=costcount(c,x_5)
print("cost of case K=%s and L_S=%s is %s"%(l,D_L,cost_internal))

import numpy as np
import random as random
random.seed(1215)
np.random.seed(1130)

l=1

first_sigma_improvement=1.1
first_sigma_percentage=0
second_sigma_improvement=1.15
second_sigma_percentage=0
third_sigma_improvement=1.2
third_sigma_percentage=0
forth_sigma_improvement=1.3
out_of_sample_mean_scale_1=0.92
out_of_sample_mean_scale_2=0.92
out_of_sample_mean_scale_3=0.92
out_of_sample_mean_scale_4=0.92
data_original,data_for_outofsample_5,data_for_outofsample_6,data_for_outofsample_7,data_for_outofsample_8=fun_create_data_Theta_4_OutSam(
    offset_SIWSI,z_lower,z_upper,z_mean,sigma_of_data_creation,first_sigma_improvement,second_sigma_improvement,
    third_sigma_improvement,forth_sigma_improvement,
     out_of_sample_mean_scale_1, out_of_sample_mean_scale_2, out_of_sample_mean_scale_3,  out_of_sample_mean_scale_4,
    )

z_ij_ub_train=z_ij_ub
z_ij_lb_train=z_ij_lb

z_ij_ub_test=z_ij_ub
z_ij_lb_test=z_ij_lb

#v_ijk=list_data_to_tuple_with_k(z_mean,N,M_i,K)
# out of sample testing date

data_train=data_original[:OutOfSample]

data_train_5=clustered_original_data_with_label(data_train,l,3)   #trainig set
mu_data_train_5 = fun_data_M_i_cluster_to_tuple_mu(data_train_5,l,N,M_i,T_ij)
#mu_data_train_5  fun_nu(data_train),N,M_i,K)
v_ijk_train_5=fun_nu(data_train_5,N,M_i,l)
        #print("v_ijk_D_without_m is ",v_ijk_D_without_m)

mu_lb_train_5 = tuple_data_with_deta_for_all(v_ijk_train_5,-0.5)
        #print("mu_lb_D_m is ",mu_lb_D_m)
mu_ub_train_5 = tuple_data_with_deta_for_all(v_ijk_train_5,0.5)
        #print("mu_lb_D_m is ",mu_lb_D_m)

sigma_train_5=fun_data_M_i_cluster_to_tuple_sigma(data_train_5,l,M_i)
#print("sigma_D_m is  ",sigma_D_m)


epsilon_5=fun_nu_epsilon(N,M_i,l)
        #print("epsilon is ",epsilon)

p_5 = p_k(data_train_5, l)

#print(p_5)

x_dict_5, cost_p3_5 = model_DRO_Proposition_3_cv(R_0,D_L,mu_data_train_5,mu_lb_train_5,mu_ub_train_5
                                                 ,v_ijk_train_5,sigma_train_5,epsilon_5, p_5,l)
x_5=dic_x_to_tuple_x(x_dict_5,N,M_i,T_ij)
print("desin of OMD is \n ")
print(x_5)
cost_internal=costcount(c,x_5)
print("cost of case K=%s and L_S=%s is %s"%(l,D_L,cost_internal))

out_of_sample_life_5_sigma_5= [[],[],[]]
out_of_sample_life_5_larger_dl_5= [[],[],[]]
mean_of_out_of_sample_reliability_level_5_5=[[],[],[]]
std_of_out_of_sample_reliability_level_5_5=[[],[],[]]


out_of_sample_life_5_sigma_6= [[],[],[]]
out_of_sample_life_5_larger_dl_6 = [[],[],[]]
mean_of_out_of_sample_reliability_level_5_6=[[],[],[]]
std_of_out_of_sample_reliability_level_5_6=[[],[],[]]

out_of_sample_life_5_sigma_7 = [[],[],[]]
out_of_sample_life_5_larger_dl_7= [[],[],[]]
mean_of_out_of_sample_reliability_level_5_7=[[],[],[]]
std_of_out_of_sample_reliability_level_5_7=[[],[],[]]

out_of_sample_life_5_sigma_8 = [[],[],[]]
out_of_sample_life_5_larger_dl_8= [[],[],[]]
mean_of_out_of_sample_reliability_level_5_8=[[],[],[]]
std_of_out_of_sample_reliability_level_5_8=[[],[],[]]

#design_list = [(((0, 1, 0), (1, 0, 0), (0, 0, 0)), ((0, 1, 0), (0, 0, 0), (0, 1, 1)), ((0, 0, 0), (1, 0, 0), (1, 1, 1))),
               #(((0, 0, 0), (1, 1, 0), (0, 0, 0)), ((0, 1, 0), (0, 1, 1), (0, 0, 0)), ((1, 0, 0), (1, 1, 1), (1, 0, 0)))]
    
design_list=[

(((0, 0, 0), (1, 1, 0), (0, 0, 0)), ((1, 1, 1), (1, 1, 1), (0, 0, 0)), ((0, 1, 0), (1, 0, 0), (1, 1, 1))),
#(((0, 0, 0), (1, 0, 1), (0, 0, 0)), ((0, 1, 1), (1, 1, 1), (0, 0, 0)), ((0, 0, 0), (1, 1, 0), (1, 1, 1)))
(((0, 0, 0), (1, 0, 1), (0, 0, 0)), ((1, 0, 1), (0, 0, 0), (1, 0, 1)), ((0, 1, 0), (0, 0, 1), (1, 1, 1)))
]



#v_ijk=list_data_to_tuple_with_k(z_mean,N,M_i,K)
# out of sample testing date

l_list=[1,5]

for D_L_i,l in enumerate(l_list):
    print(D_L_i)
    '''
    
    z_ij_ub_train=z_ij_ub
    z_ij_lb_train=z_ij_lb
            
    z_ij_ub_test=z_ij_ub
    z_ij_lb_test=z_ij_lb
    
    #v_ijk=list_data_to_tuple_with_k(z_mean,N,M_i,K)
    # out of sample testing date

    data_train=data_original[:OutOfSample]
    
    data_train_5=clustered_original_data_with_label(data_train,l,3)   #trainig set
    mu_data_train_5 = fun_data_M_i_cluster_to_tuple_mu(data_train_5,l,N,M_i,T_ij)
    #mu_data_train_5  fun_nu(data_train),N,M_i,K)
    v_ijk_train_5=fun_nu(data_train_5,N,M_i,l)
            #print("v_ijk_D_without_m is ",v_ijk_D_without_m)
            
    mu_lb_train_5 = tuple_data_with_deta_for_all(v_ijk_train_5,-2)
            #print("mu_lb_D_m is ",mu_lb_D_m)
    mu_ub_train_5 = tuple_data_with_deta_for_all(v_ijk_train_5,2)
            #print("mu_lb_D_m is ",mu_lb_D_m)
    
    sigma_train_5=fun_data_M_i_cluster_to_tuple_sigma(data_train_5,l,M_i)
    #print("sigma_D_m is  ",sigma_D_m)
            
            
    epsilon_5=fun_nu_epsilon(N,M_i,l)
            #print("epsilon is ",epsilon)
    
    p_5 = p_k(data_train_5, l)
    
    #print(p_5)
    
    x_dict_5, cost_p3_5 = model_DRO_Proposition_3_cv(R_0,D_L,mu_data_train_5,mu_lb_train_5,mu_ub_train_5
                                                     ,v_ijk_train_5,sigma_train_5,epsilon_5, p_5,l)
    x_5=dic_x_to_tuple_x(x_dict_5,N,M_i,T_ij)

    '''
    
    x_5 = design_list[D_L_i]
   
    '''
    sigam=1.1 ，此时的out of sample test result
    '''
    print("desin of OMD is \n ")
    print(x_5)
    cost_internal=costcount(c,x_5)
    print("cost of case K=%s and L_S=%s is %s"%(l,D_L,cost_internal))
    for ol in range(OutOfSample):
        z_test_5 = {}
        for i_1 in range(N):
            for j in range(M_i[i_1]):
                for t in range(T_ij[i_1][j]):
                    z_test_5[i_1,j,t]= data_for_outofsample_5[ol + t * OutOfSample + OutOfSample, i_1*3  + j]                                                            
        lt_OMD_5=compute_life(z_test_5, x_5)  #计算系统的实际寿命
        out_of_sample_life_5_sigma_5[D_L_i].append(lt_OMD_5)
        out_of_sample_life_5_larger_dl_5[D_L_i].append(compare(lt_OMD_5,D_L))
    mean_of_out_of_sample_reliability_level_5_5[D_L_i].append(round(sum(out_of_sample_life_5_larger_dl_5[D_L_i])/OutOfSample,4))
    std_of_out_of_sample_reliability_level_5_5[D_L_i].append(statistics.stdev(out_of_sample_life_5_larger_dl_5[D_L_i]))
    
    '''
    sigma =1.5，此时的out of sample test result
    '''
    for ol in range(OutOfSample):
        z_test_6 = {}
        for i_1 in range(N):
            for j in range(M_i[i_1]):
                for t in range(T_ij[i_1][j]):
                    z_test_6[i_1,j,t]= data_for_outofsample_6[ol + t * OutOfSample + OutOfSample, i_1*3  + j]                                                        
        lt_OMD_6=compute_life(z_test_6, x_5)  #计算系统的实际寿命
        out_of_sample_life_5_sigma_6[D_L_i].append(lt_OMD_6)
        out_of_sample_life_5_larger_dl_6[D_L_i].append(compare(lt_OMD_6,D_L))
    mean_of_out_of_sample_reliability_level_5_6[D_L_i].append(round(sum(out_of_sample_life_5_larger_dl_6[D_L_i])/OutOfSample,4))
    std_of_out_of_sample_reliability_level_5_6[D_L_i].append(statistics.stdev(out_of_sample_life_5_larger_dl_6[D_L_i]))
        
    '''
    sigma =1.8，此时的out of sample test result
    '''
    for ol in range(OutOfSample):
        z_test_7 = {}
        for i_1 in range(N):
            for j in range(M_i[i_1]):
                for t in range(T_ij[i_1][j]):
                    z_test_7[i_1,j,t]= data_for_outofsample_7[ol + t * OutOfSample + OutOfSample, i_1*3  + j]                                                           
        lt_OMD_7=compute_life(z_test_7, x_5)  #计算系统的实际寿命
        out_of_sample_life_5_sigma_7[D_L_i].append(lt_OMD_7)
        out_of_sample_life_5_larger_dl_7[D_L_i].append(compare(lt_OMD_7,D_L))
    mean_of_out_of_sample_reliability_level_5_7[D_L_i].append(round(sum(out_of_sample_life_5_larger_dl_7[D_L_i])/OutOfSample,4))
    std_of_out_of_sample_reliability_level_5_7[D_L_i].append(statistics.stdev(out_of_sample_life_5_larger_dl_7[D_L_i]))
    
    
    for ol in range(OutOfSample):
        z_test_8 = {}
        for i_1 in range(N):
            for j in range(M_i[i_1]):
                for t in range(T_ij[i_1][j]):
                    z_test_8[i_1,j,t]= data_for_outofsample_8[ol + t * OutOfSample + OutOfSample, i_1*3  + j]                                                           
        lt_OMD_8=compute_life(z_test_8, x_5)  #计算系统的实际寿命
        out_of_sample_life_5_sigma_8[D_L_i].append(lt_OMD_8)
        out_of_sample_life_5_larger_dl_8[D_L_i].append(compare(lt_OMD_8,D_L))
    mean_of_out_of_sample_reliability_level_5_8[D_L_i].append(round(sum(out_of_sample_life_5_larger_dl_8[D_L_i])/OutOfSample,4))
    std_of_out_of_sample_reliability_level_5_8[D_L_i].append(statistics.stdev(out_of_sample_life_5_larger_dl_8[D_L_i]))
    
print("mean_of_out_of_sample_reliability_level_5 is \n %s"%mean_of_out_of_sample_reliability_level_5_5)
print("std_of_out_of_sample_reliability_level_5 is\n ")
print( std_of_out_of_sample_reliability_level_5_5)
print("mean_of_out_of_sample_reliability_level_5_6 is \n %s"%mean_of_out_of_sample_reliability_level_5_6)
print("std_of_out_of_sample_reliability_level_5_6is\n ")
print( std_of_out_of_sample_reliability_level_5_6) 
print("mean_of_out_of_sample_reliability_level_5_7 is \n %s"%mean_of_out_of_sample_reliability_level_5_7)
print("std_of_out_of_sample_reliability_level_5_7 is\n ")
print( std_of_out_of_sample_reliability_level_5_7) 
print("mean_of_out_of_sample_reliability_level_5_8 is \n %s"%mean_of_out_of_sample_reliability_level_5_8)
print("std_of_out_of_sample_reliability_level_5_8 is\n ")
print( std_of_out_of_sample_reliability_level_5_8) 

import matplotlib.pyplot as plt
    #plt.style.use('seaborn-whitegrid')
import numpy as np
import matplotlib.ticker as ticker
from pylab import *
fig = plt.figure("L_S",dpi=280)
fig.set_figheight(10)
fig.set_figwidth(40)


alpha_a=0.78
alpha_b=0.78

bin1= np.linspace(27,37,80)
bin2= np.linspace(27,37,80)
bin3= np.linspace(27,37,80)
bin4= np.linspace(27,37,80)



x_l_5,x_r_5=27,37
x_l_6,x_r_6=27,37
x_l_7,x_r_7=27,37
x_l_8,x_r_8=27,37

yl=0.07
    # 网格参数
     #
ax5 = plt.subplot(245)
x=np.full(100,D_L_list[0])
y=np.linspace(0,120,100)
plt.plot(x, y,color="black", linewidth=5)
#ax.set_xlabel('Out-of-sample systme lifetime ')
ax5.set_ylabel('Probability with out-of-sample \n lifetime data ',fontsize=25)
    # define range of x axis
ax5.set_ylim(0, yl)
    # define range of y axis
ax5.set_xlim(x_l_5,x_r_5)
    #plt.xticks(range(len(al_all)))
    #plt.gca().xaxis.set_major_formatter(ticker.FormatStrFormatter('%1i'))
weights_5_5=np.ones_like(out_of_sample_life_5_sigma_5[0])/float(len(out_of_sample_life_5_sigma_5[0]))
weights_pr_5=np.ones_like(out_of_sample_life_5_sigma_5[1])/float(len(out_of_sample_life_5_sigma_5[1]))

    
plt.hist(out_of_sample_life_5_sigma_5[0], bin1,facecolor="white", edgecolor="black",alpha=alpha_a, label = "With S.I",weights=weights_5_5,stacked=False)
plt.hist(out_of_sample_life_5_sigma_5[1],bin1, facecolor="silver",edgecolor="black",alpha=alpha_b, label = "Without S.I",weights=weights_pr_5,stacked=False)
    #ax.plot(dl_all,model_output,color='DarkSlateGray',lw=0.5,markeredgecolor='DarkSlateGray',marker='o',markerfacecolor='white',markersize=3.5)
ax5.legend(loc='upper right',fontsize=23)
plt.grid(linestyle='--',linewidth=0.45)
ax5_up = ax5.twiny()  # this is the important function
#ax_up.set_xlabel("Δ\u2098: %s, Δ\u209B: %s" % ("5%", "800%"))
ax5.set_xlabel("Out-of-sample system lifetime\nΔ\u2098: %s, Δ\u209B: %s \n(e)" % ("5%", "10%"),fontsize=25)
plt.xticks(fontsize=25)
plt.yticks(fontsize=25)

ax6 = plt.subplot(246)

    # 网格参数
     #
x=np.full(100,D_L_list[0])
y=np.linspace(0,120,100)
plt.plot(x, y,color="black", linewidth=5)
#ax2.set_xlabel('Out-of-sample systme lifetime ')
ax6.set_ylabel('Probability with out-of-sample \n lifetime data ',fontsize=25)
    # define range of x axis
ax6.set_ylim(0, yl)
    # define range of y axis
ax6.set_xlim(x_l_6,x_r_6)
    #plt.xticks(range(len(al_all)))
    #plt.gca().xaxis.set_major_formatter(ticker.FormatStrFormatter('%1i'))
weights_5_6=np.ones_like(out_of_sample_life_5_sigma_6[0])/float(len(out_of_sample_life_5_sigma_6[0]))
weights_pr_6=np.ones_like(out_of_sample_life_5_sigma_6[1])/float(len(out_of_sample_life_5_sigma_6[1]))

plt.hist(out_of_sample_life_5_sigma_6[0], bin2,facecolor="white", edgecolor="black",alpha=alpha_a, label = "With S.I",weights=weights_5_6,stacked=False)
plt.hist(out_of_sample_life_5_sigma_6[1],bin2, facecolor="silver",edgecolor="black",alpha=alpha_b, label = "Without S.I",weights=weights_pr_6,stacked=False)
    #ax.plot(dl_all,model_output,color='DarkSlateGray',lw=0.5,markeredgecolor='DarkSlateGray',marker='o',markerfacecolor='white',markersize=3.5)
plt.xticks(fontsize=25)
plt.yticks(fontsize=25)
ax6.legend(loc='upper right',fontsize=23)
plt.grid(linestyle='--',linewidth=0.45)
ax6_up = ax6.twiny()  # this is the important function
#ax2_up.set_xlabel("Δ\u2098: %s, Δ\u209B: %s" % ("5%", "1000%"))
ax6.set_xlabel("Out-of-sample system lifetime\nΔ\u2098: %s, Δ\u209B: %s \n(f)" % ("5%", "15%"),fontsize=25)

ax7 = plt.subplot(247)

    # 网格参数
     #
x=np.full(100,D_L_list[0])
y=np.linspace(0,120,100)
plt.plot(x, y,color="black", linewidth=5)
#ax3.set_xlabel('Out-of-sample systme lifetime ')
ax7.set_ylabel('Probability with out-of-sample \n lifetime data ',fontsize=25)
    # define range of x axis
ax7.set_ylim(0,yl)
    # define range of y axis
ax7.set_xlim(x_l_7,x_r_7)
    #plt.xticks(range(len(al_all)))
    #plt.gca().xaxis.set_major_formatter(ticker.FormatStrFormatter('%1i'))
weights_5_7=np.ones_like(out_of_sample_life_5_sigma_7[0])/float(len(out_of_sample_life_5_sigma_7[0]))
weights_pr_7=np.ones_like(out_of_sample_life_5_sigma_7[1])/float(len(out_of_sample_life_5_sigma_7[1]))

plt.hist(out_of_sample_life_5_sigma_7[0], bin3,facecolor="white", edgecolor="black",alpha=alpha_a, label = "With S.I",weights=weights_5_7,stacked=False)
plt.hist(out_of_sample_life_5_sigma_7[1],bin3, facecolor="silver",edgecolor="black",alpha=alpha_b, label = "Without S.l",weights=weights_pr_7,stacked=False)
plt.xticks(fontsize=25)
plt.yticks(fontsize=25)
    #ax.plot(dl_all,model_output,color='DarkSlateGray',lw=0.5,markeredgecolor='DarkSlateGray',marker='o',markerfacecolor='white',markersize=3.5)
ax7.legend(loc='upper right',fontsize=23)
plt.grid(linestyle='--',linewidth=0.45)
ax7_up = ax7.twiny()  # this is the important function
#ax3_up.set_xlabel("Δ\u2098: %s, Δ\u209B: %s" % ("5%", "1200%"))
ax7.set_xlabel("Out-of-sample system lifetime\nΔ\u2098: %s, Δ\u209B: %s \n(g)" % ("5%", "20%"),fontsize=25)

ax8 = plt.subplot(248)

    # 网格参数
     #
x=np.full(100,D_L_list[0])
y=np.linspace(0,120,100)
plt.plot(x, y,color="black", linewidth=5)
#ax3.set_xlabel('Out-of-sample systme lifetime ')
ax8.set_ylabel('Probability with out-of-sample \n lifetime data ',fontsize=25)
    # define range of x axis
ax8.set_ylim(0,yl)
    # define range of y axis
ax8.set_xlim(x_l_8,x_r_8)
    #plt.xticks(range(len(al_all)))
    #plt.gca().xaxis.set_major_formatter(ticker.FormatStrFormatter('%1i'))
weights_5_8=np.ones_like(out_of_sample_life_5_sigma_8[0])/float(len(out_of_sample_life_5_sigma_8[0]))
weights_pr_8=np.ones_like(out_of_sample_life_5_sigma_8[1])/float(len(out_of_sample_life_5_sigma_8[1]))

plt.hist(out_of_sample_life_5_sigma_8[0], bin4,facecolor="white", edgecolor="black",alpha=alpha_a, label = "With S.I",weights=weights_5_8,stacked=False)
plt.hist(out_of_sample_life_5_sigma_8[1],bin4, facecolor="silver",edgecolor="black",alpha=alpha_b, label = "Without S.l",weights=weights_pr_8,stacked=False)
plt.xticks(fontsize=25)
plt.yticks(fontsize=25)
    #ax.plot(dl_all,model_output,color='DarkSlateGray',lw=0.5,markeredgecolor='DarkSlateGray',marker='o',markerfacecolor='white',markersize=3.5)
ax8.legend(loc='upper right',fontsize=23)
plt.grid(linestyle='--',linewidth=0.45)
ax8_up = ax4.twiny()  # this is the important function
#ax3_up.set_xlabel("Δ\u2098: %s, Δ\u209B: %s" % ("5%", "1200%"))
ax8.set_xlabel("Out-of-sample system lifetime\nΔ\u2098: %s, Δ\u209B: %s \n(h)" % ("5%", "30%"),fontsize=25)

    # 网格参数
     #



'''
tick
'''

ax.tick_params(axis='x',width=2,labelsize=25)
ax.tick_params(axis='y',width=2,labelsize=25)
ax2.tick_params(axis='x',width=2,labelsize=25)
ax2.tick_params(axis='y',width=2,labelsize=25)
ax3.tick_params(axis='x',width=2,labelsize=25)
ax3.tick_params(axis='y',width=2,labelsize=25)
ax4.tick_params(axis='x',width=2,labelsize=25)
ax4.tick_params(axis='y',width=2,labelsize=25)
ax5.tick_params(axis='x',width=2,labelsize=25)
ax5.tick_params(axis='y',width=2,labelsize=25)
ax6.tick_params(axis='x',width=2,labelsize=25)
ax6.tick_params(axis='y',width=2,labelsize=25)
ax7.tick_params(axis='x',width=2,labelsize=25)
ax7.tick_params(axis='y',width=2,labelsize=25)
ax8.tick_params(axis='x',width=2,labelsize=25)
ax8.tick_params(axis='y',width=2,labelsize=25)
#ax4.tick_params(axis='x',width=0,labelsize=0)
#ax4.tick_params(axis='y',width=2,labelsize='medium')
#ax5.tick_params(axis='x',width=0,labelsize=0)
#ax5.tick_params(axis='y',width=0,labelsize=0)
#ax6.tick_params(axis='x',width=0,labelsize=0)
#ax6.tick_params(axis='y',width=0,labelsize=0)

ax_up.tick_params(axis='x',width=0,labelsize=0)
ax2_up.tick_params(axis='x',width=0,labelsize=0)
ax3_up.tick_params(axis='x',width=0,labelsize=0)
ax4_up.tick_params(axis='x',width=0,labelsize=0)
ax5_up.tick_params(axis='x',width=0,labelsize=0)
ax6_up.tick_params(axis='x',width=0,labelsize=0)
ax7_up.tick_params(axis='x',width=0,labelsize=0)
ax8_up.tick_params(axis='x',width=0,labelsize=0)
plt.subplots_adjust(wspace=0.4, hspace=0.4)


